
#include "pgSQL.h"

	DatabaseClients::DatabaseClients() {
		try {
			conn = std::make_unique<pqxx::connection>(
				"host=localhost "
				"port=5432 "
				"dbname=clients "
				"user=XXXX "
				"password=XXXX "
				);

		}
		catch (const std::exception& ex) {
			std::cout << "Error when connecting to database: " << ex.what() << std::endl;
		}
	}
	//Создать БД
	void DatabaseClients::createDB() {
		std::string create_client = "CREATE TABLE IF NOT EXISTS client ( "
			"id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
			"name VARCHAR(50) NOT null, "
			"surname VARCHAR(50) NOT null, "
			"email varchar(50) "
			");";

		std::string create_phone = "CREATE TABLE IF NOT EXISTS phone ( "
			"id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY, "
			"client_id INTEGER not null references client(id) ON DELETE CASCADE, "
			"phone VARCHAR(20) "
			");";
		pqxx::work t(*conn);
		t.exec(create_client);
		t.exec(create_phone);
		t.commit();
	}
	//Добавить клиента
	void DatabaseClients::addClient(std::string name, std::string surname, std::string email) {
		pqxx::work t(*conn);
		std::string client = "INSERT INTO client (name, surname, email) VALUES ('"
			+ t.esc(name) + "'" + ", '" + t.esc(surname) + "', '" + t.esc(email) + "');";
		t.exec(client);
		t.commit();
	}
	//Получить ID по имени и фамилии
	int DatabaseClients::getClientID(std::string name, std::string surname) {
		pqxx::work g(*conn);
		std::string get = "SELECT ID FROM CLIENT WHERE NAME = '" + g.esc(name) + "' AND SURNAME = '" + g.esc(surname) + "';";
		pqxx::result result = g.exec(get);
		if (!result.empty()) {
			int clientID = result[0][0].as<int>();
			return clientID;
		}
		else {
			std::cout << "Введён несуществующий ID";
			return 0;
		}

	}
	//Добавить телефон
	void DatabaseClients::addPhone(int client_id, std::string phone) {
		pqxx::work t(*conn);
		std::string query = "INSERT INTO phone (client_id, phone) VALUES (" + t.esc(std::to_string(client_id)) + ", '" + t.esc(phone) + "');";
		t.exec(query);
		t.commit();
	}
	//Изменить данные о клиенте
	void DatabaseClients::changeClient(int id, std::string name, std::string surname, std::string email) {

		pqxx::work t(*conn);
		if (!(name.empty()) || !(surname.empty()) || !(email.empty())) {
			if (!(name.empty())) {
				std::string change = "update client set name ='" + t.esc(name) + "' where id =" + std::to_string(id);
				t.exec(change);

			}
			if (!(surname.empty())) {
				std::string change = "update client set surname ='" + t.esc(surname) + "' where id =" + std::to_string(id);
				t.exec(change);
			}
			if (!(email.empty())) {
				std::string change = "update client set email ='" + t.esc(email) + "' where id =" + std::to_string(id);
				t.exec(change);
			}
			t.commit();

		}
		else {
			std::cout << "Переданы пустые значения";
		}

	}
	//Удалить телефон
	void DatabaseClients::deletePhone(int client_id) {
		pqxx::work t(*conn);
		std::string query = "DELETE FROM phone WHERE CLIENT_ID = " + t.esc(std::to_string(client_id)) + ";";
		t.exec(query);
		t.commit();
	}
	//Удалить клиента
	void DatabaseClients::deleteClient(int client_id) {
		pqxx::work t(*conn);
		std::string query = "DELETE FROM client WHERE ID = " + t.esc(std::to_string(client_id)) + ";";
		t.exec(query);
		t.commit();
	}
	//Найти клиента
	void DatabaseClients::findClient(std::string search) {
		pqxx::work t(*conn);
		std::string query = "SELECT C.NAME, C.SURNAME, C.EMAIL, P.PHONE FROM CLIENT C "
			"LEFT JOIN PHONE P ON P.CLIENT_ID = C.ID "
			"WHERE C.NAME LIKE '" + t.esc(search) + "' "
			"OR C.SURNAME LIKE '" + t.esc(search) + "' "
			"OR C.EMAIL LIKE '" + t.esc(search) + "' "
			"OR P.PHONE LIKE '" + t.esc(search) + "'; ";
		pqxx::result res = t.exec(query);
		std::cout << "Name\t" << "Surname\t" << "Email\t\t" << "Phone\t" << std::endl;
		for (int row = 0; row < res.size(); row++) {
			for (int col = 0; col < res.columns(); col++) {
				std::cout << res.at(row).at(col).c_str() << "\t";
			}
			std::cout << std::endl;
		}
	}
	//Вывести всю таблицу
	void DatabaseClients::printAll() {
		pqxx::work t(*conn);
		std::string query = "SELECT C.NAME, C.SURNAME, C.EMAIL, P.PHONE FROM CLIENT C "
			"LEFT JOIN PHONE P ON P.CLIENT_ID = C.ID;";
		pqxx::result res = t.exec(query);
		std::cout << "Name\t" << "Surname\t" << "Email\t\t" << "Phone\t" << std::endl;
		for (int row = 0; row < res.size(); row++) {
			for (int col = 0; col < res.columns(); col++) {
				std::cout << res.at(row).at(col).c_str() << "\t";
			}
			std::cout << std::endl;
		}
	}